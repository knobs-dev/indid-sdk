/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type UserOperationStruct = {
  sender: string;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export interface SimpleAccountInterface extends utils.Interface {
  functions: {
    "addDeposit()": FunctionFragment;
    "authoriseModule(address,bool)": FunctionFragment;
    "authorised(address)": FunctionFragment;
    "enableStaticCall(address,bytes4)": FunctionFragment;
    "enabled(bytes4)": FunctionFragment;
    "entryPoint()": FunctionFragment;
    "getDeposit()": FunctionFragment;
    "getNonce()": FunctionFragment;
    "initModules(address[])": FunctionFragment;
    "initialize(address,address,bytes32,address)": FunctionFragment;
    "invoke(address,uint256,bytes)": FunctionFragment;
    "invokeModule(address,bytes,uint256,uint256,bytes)": FunctionFragment;
    "modules()": FunctionFragment;
    "owner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "signatureModule()": FunctionFragment;
    "staticCallExecutor()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
    "withdrawDepositTo(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDeposit"
      | "authoriseModule"
      | "authorised"
      | "enableStaticCall"
      | "enabled"
      | "entryPoint"
      | "getDeposit"
      | "getNonce"
      | "initModules"
      | "initialize"
      | "invoke"
      | "invokeModule"
      | "modules"
      | "owner"
      | "proxiableUUID"
      | "setOwner"
      | "signatureModule"
      | "staticCallExecutor"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "validateUserOp"
      | "withdrawDepositTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authoriseModule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "authorised", values: [string]): string;
  encodeFunctionData(
    functionFragment: "enableStaticCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "enabled", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initModules",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invokeModule",
    values: [string, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "modules", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "signatureModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "staticCallExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDepositTo",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authoriseModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invokeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signatureModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "staticCallExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDepositTo",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AuthorisedModule(address,bool)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Invoked(address,address,uint256,bytes)": EventFragment;
    "OwnerChanged(address)": EventFragment;
    "Received(uint256,address,bytes)": EventFragment;
    "SimpleAccountInitialized(address,address,bytes32,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorisedModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Invoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SimpleAccountInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AuthorisedModuleEventObject {
  module: string;
  value: boolean;
}
export type AuthorisedModuleEvent = TypedEvent<
  [string, boolean],
  AuthorisedModuleEventObject
>;

export type AuthorisedModuleEventFilter =
  TypedEventFilter<AuthorisedModuleEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InvokedEventObject {
  module: string;
  target: string;
  value: BigNumber;
  data: string;
}
export type InvokedEvent = TypedEvent<
  [string, string, BigNumber, string],
  InvokedEventObject
>;

export type InvokedEventFilter = TypedEventFilter<InvokedEvent>;

export interface OwnerChangedEventObject {
  owner: string;
}
export type OwnerChangedEvent = TypedEvent<[string], OwnerChangedEventObject>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface ReceivedEventObject {
  value: BigNumber;
  sender: string;
  data: string;
}
export type ReceivedEvent = TypedEvent<
  [BigNumber, string, string],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface SimpleAccountInitializedEventObject {
  entryPoint: string;
  owner: string;
  _guardians: string;
  _module: string;
}
export type SimpleAccountInitializedEvent = TypedEvent<
  [string, string, string, string],
  SimpleAccountInitializedEventObject
>;

export type SimpleAccountInitializedEventFilter =
  TypedEventFilter<SimpleAccountInitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface SimpleAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorised(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    enableStaticCall(
      _module: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enabled(_sig: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    entryPoint(overrides?: CallOverrides): Promise<[string]>;

    getDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    initModules(
      _modules: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      anEntryPoint: string,
      _owner: string,
      _guardians: BytesLike,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    invokeModule(
      _module: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    modules(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signatureModule(overrides?: CallOverrides): Promise<[string]>;

    staticCallExecutor(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addDeposit(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  authoriseModule(
    _module: string,
    _value: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  enableStaticCall(
    _module: string,
    arg1: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enabled(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;

  entryPoint(overrides?: CallOverrides): Promise<string>;

  getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  getNonce(overrides?: CallOverrides): Promise<BigNumber>;

  initModules(
    _modules: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    anEntryPoint: string,
    _owner: string,
    _guardians: BytesLike,
    _module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  invoke(
    _target: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  invokeModule(
    _module: string,
    _data: BytesLike,
    _nonce: BigNumberish,
    _deadline: BigNumberish,
    _signatures: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  modules(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  signatureModule(overrides?: CallOverrides): Promise<string>;

  staticCallExecutor(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateUserOp(
    userOp: UserOperationStruct,
    userOpHash: BytesLike,
    missingAccountFunds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawDepositTo(
    withdrawAddress: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDeposit(overrides?: CallOverrides): Promise<void>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    authorised(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    enableStaticCall(
      _module: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enabled(_sig: BytesLike, overrides?: CallOverrides): Promise<string>;

    entryPoint(overrides?: CallOverrides): Promise<string>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    initModules(_modules: string[], overrides?: CallOverrides): Promise<void>;

    initialize(
      anEntryPoint: string,
      _owner: string,
      _guardians: BytesLike,
      _module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    invokeModule(
      _module: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modules(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    signatureModule(overrides?: CallOverrides): Promise<string>;

    staticCallExecutor(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AuthorisedModule(address,bool)"(
      module?: string | null,
      value?: null
    ): AuthorisedModuleEventFilter;
    AuthorisedModule(
      module?: string | null,
      value?: null
    ): AuthorisedModuleEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Invoked(address,address,uint256,bytes)"(
      module?: string | null,
      target?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): InvokedEventFilter;
    Invoked(
      module?: string | null,
      target?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): InvokedEventFilter;

    "OwnerChanged(address)"(owner?: null): OwnerChangedEventFilter;
    OwnerChanged(owner?: null): OwnerChangedEventFilter;

    "Received(uint256,address,bytes)"(
      value?: BigNumberish | null,
      sender?: string | null,
      data?: null
    ): ReceivedEventFilter;
    Received(
      value?: BigNumberish | null,
      sender?: string | null,
      data?: null
    ): ReceivedEventFilter;

    "SimpleAccountInitialized(address,address,bytes32,address)"(
      entryPoint?: string | null,
      owner?: string | null,
      _guardians?: null,
      _module?: null
    ): SimpleAccountInitializedEventFilter;
    SimpleAccountInitialized(
      entryPoint?: string | null,
      owner?: string | null,
      _guardians?: null,
      _module?: null
    ): SimpleAccountInitializedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorised(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    enableStaticCall(
      _module: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enabled(_sig: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    entryPoint(overrides?: CallOverrides): Promise<BigNumber>;

    getDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(overrides?: CallOverrides): Promise<BigNumber>;

    initModules(
      _modules: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      anEntryPoint: string,
      _owner: string,
      _guardians: BytesLike,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    invokeModule(
      _module: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    modules(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signatureModule(overrides?: CallOverrides): Promise<BigNumber>;

    staticCallExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authoriseModule(
      _module: string,
      _value: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorised(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableStaticCall(
      _module: string,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enabled(
      _sig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initModules(
      _modules: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      anEntryPoint: string,
      _owner: string,
      _guardians: BytesLike,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    invoke(
      _target: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    invokeModule(
      _module: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    modules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signatureModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staticCallExecutor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawDepositTo(
      withdrawAddress: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
