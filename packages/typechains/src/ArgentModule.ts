/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type UserOperationStruct = {
  sender: string;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export declare namespace TransactionManager {
  export type CallStruct = { to: string; value: BigNumberish; data: BytesLike };

  export type CallStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export interface ArgentModuleInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "addGuardian(address,address)": FunctionFragment;
    "addModule(address,address)": FunctionFragment;
    "addToWhitelist(address,address)": FunctionFragment;
    "cancelGuardianAddition(address,address)": FunctionFragment;
    "cancelGuardianRevokation(address,address)": FunctionFragment;
    "cancelRecovery(address)": FunctionFragment;
    "clearSession(address)": FunctionFragment;
    "confirmGuardianAddition(address,address)": FunctionFragment;
    "confirmGuardianRevokation(address,address)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "execute(address,bytes,uint256,uint256,bytes)": FunctionFragment;
    "executeRecovery(address,address)": FunctionFragment;
    "finalizeRecovery(address)": FunctionFragment;
    "getGuardians(address)": FunctionFragment;
    "getLock(address)": FunctionFragment;
    "getRecovery(address)": FunctionFragment;
    "getRequiredSignatures(address,bytes)": FunctionFragment;
    "getSession(address)": FunctionFragment;
    "guardianCount(address)": FunctionFragment;
    "init(address)": FunctionFragment;
    "isExecutedTx(address,bytes32)": FunctionFragment;
    "isGuardian(address,address)": FunctionFragment;
    "isLocked(address)": FunctionFragment;
    "isSignatureModule()": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": FunctionFragment;
    "isWhitelisted(address,address)": FunctionFragment;
    "lock(address)": FunctionFragment;
    "multiCall(address,(address,uint256,bytes)[])": FunctionFragment;
    "multiCallWithGuardians(address,(address,uint256,bytes)[])": FunctionFragment;
    "multiCallWithGuardiansAndStartSession(address,(address,uint256,bytes)[],address,uint64)": FunctionFragment;
    "multiCallWithSession(address,(address,uint256,bytes)[])": FunctionFragment;
    "recoverToken(address)": FunctionFragment;
    "removeFromWhitelist(address,address)": FunctionFragment;
    "revokeGuardian(address,address)": FunctionFragment;
    "supportsStaticCall(bytes4)": FunctionFragment;
    "transferOwnership(address,address)": FunctionFragment;
    "unlock(address)": FunctionFragment;
    "upgradeWallet(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "addGuardian"
      | "addModule"
      | "addToWhitelist"
      | "cancelGuardianAddition"
      | "cancelGuardianRevokation"
      | "cancelRecovery"
      | "clearSession"
      | "confirmGuardianAddition"
      | "confirmGuardianRevokation"
      | "eip712Domain"
      | "execute"
      | "executeRecovery"
      | "finalizeRecovery"
      | "getGuardians"
      | "getLock"
      | "getRecovery"
      | "getRequiredSignatures"
      | "getSession"
      | "guardianCount"
      | "init"
      | "isExecutedTx"
      | "isGuardian"
      | "isLocked"
      | "isSignatureModule"
      | "isValidSignature(bytes32,bytes)"
      | "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"
      | "isWhitelisted"
      | "lock"
      | "multiCall"
      | "multiCallWithGuardians"
      | "multiCallWithGuardiansAndStartSession"
      | "multiCallWithSession"
      | "recoverToken"
      | "removeFromWhitelist"
      | "revokeGuardian"
      | "supportsStaticCall"
      | "transferOwnership"
      | "unlock"
      | "upgradeWallet"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addGuardian",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGuardianAddition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGuardianRevokation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRecovery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearSession",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmGuardianAddition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmGuardianRevokation",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRecovery",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRecovery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardians",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getLock", values: [string]): string;
  encodeFunctionData(functionFragment: "getRecovery", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRequiredSignatures",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSession", values: [string]): string;
  encodeFunctionData(
    functionFragment: "guardianCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isExecutedTx",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardian",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isSignatureModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)",
    values: [UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "multiCall",
    values: [string, TransactionManager.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiCallWithGuardians",
    values: [string, TransactionManager.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiCallWithGuardiansAndStartSession",
    values: [string, TransactionManager.CallStruct[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiCallWithSession",
    values: [string, TransactionManager.CallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeGuardian",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsStaticCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeWallet",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGuardianAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGuardianRevokation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmGuardianAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmGuardianRevokation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExecutedTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSignatureModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiCallWithGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiCallWithGuardiansAndStartSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiCallWithSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsStaticCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeWallet",
    data: BytesLike
  ): Result;

  events: {
    "AddedToWhitelist(address,address,uint64)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "GuardianAdded(address,address)": EventFragment;
    "GuardianAdditionCancelled(address,address)": EventFragment;
    "GuardianAdditionRequested(address,address,uint256)": EventFragment;
    "GuardianRevokationCancelled(address,address)": EventFragment;
    "GuardianRevokationRequested(address,address,uint256)": EventFragment;
    "GuardianRevoked(address,address)": EventFragment;
    "Locked(address,uint64)": EventFragment;
    "ModuleCreated(bytes32)": EventFragment;
    "OwnershipTransfered(address,address)": EventFragment;
    "RecoveryCanceled(address,address)": EventFragment;
    "RecoveryExecuted(address,address,uint64)": EventFragment;
    "RecoveryFinalized(address,address)": EventFragment;
    "Refund(address,address,address,uint256)": EventFragment;
    "RemovedFromWhitelist(address,address)": EventFragment;
    "SessionCleared(address,address)": EventFragment;
    "SessionCreated(address,address,uint64)": EventFragment;
    "TransactionExecuted(address,bool,bytes,bytes32)": EventFragment;
    "Unlocked(address)": EventFragment;
    "WalletUpgraded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedToWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdditionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdditionRequested"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GuardianRevokationCancelled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GuardianRevokationRequested"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedFromWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SessionCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SessionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletUpgraded"): EventFragment;
}

export interface AddedToWhitelistEventObject {
  wallet: string;
  target: string;
  whitelistAfter: BigNumber;
}
export type AddedToWhitelistEvent = TypedEvent<
  [string, string, BigNumber],
  AddedToWhitelistEventObject
>;

export type AddedToWhitelistEventFilter =
  TypedEventFilter<AddedToWhitelistEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface GuardianAddedEventObject {
  wallet: string;
  guardian: string;
}
export type GuardianAddedEvent = TypedEvent<
  [string, string],
  GuardianAddedEventObject
>;

export type GuardianAddedEventFilter = TypedEventFilter<GuardianAddedEvent>;

export interface GuardianAdditionCancelledEventObject {
  wallet: string;
  guardian: string;
}
export type GuardianAdditionCancelledEvent = TypedEvent<
  [string, string],
  GuardianAdditionCancelledEventObject
>;

export type GuardianAdditionCancelledEventFilter =
  TypedEventFilter<GuardianAdditionCancelledEvent>;

export interface GuardianAdditionRequestedEventObject {
  wallet: string;
  guardian: string;
  executeAfter: BigNumber;
}
export type GuardianAdditionRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  GuardianAdditionRequestedEventObject
>;

export type GuardianAdditionRequestedEventFilter =
  TypedEventFilter<GuardianAdditionRequestedEvent>;

export interface GuardianRevokationCancelledEventObject {
  wallet: string;
  guardian: string;
}
export type GuardianRevokationCancelledEvent = TypedEvent<
  [string, string],
  GuardianRevokationCancelledEventObject
>;

export type GuardianRevokationCancelledEventFilter =
  TypedEventFilter<GuardianRevokationCancelledEvent>;

export interface GuardianRevokationRequestedEventObject {
  wallet: string;
  guardian: string;
  executeAfter: BigNumber;
}
export type GuardianRevokationRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  GuardianRevokationRequestedEventObject
>;

export type GuardianRevokationRequestedEventFilter =
  TypedEventFilter<GuardianRevokationRequestedEvent>;

export interface GuardianRevokedEventObject {
  wallet: string;
  guardian: string;
}
export type GuardianRevokedEvent = TypedEvent<
  [string, string],
  GuardianRevokedEventObject
>;

export type GuardianRevokedEventFilter = TypedEventFilter<GuardianRevokedEvent>;

export interface LockedEventObject {
  wallet: string;
  releaseAfter: BigNumber;
}
export type LockedEvent = TypedEvent<[string, BigNumber], LockedEventObject>;

export type LockedEventFilter = TypedEventFilter<LockedEvent>;

export interface ModuleCreatedEventObject {
  name: string;
}
export type ModuleCreatedEvent = TypedEvent<[string], ModuleCreatedEventObject>;

export type ModuleCreatedEventFilter = TypedEventFilter<ModuleCreatedEvent>;

export interface OwnershipTransferedEventObject {
  wallet: string;
  _newOwner: string;
}
export type OwnershipTransferedEvent = TypedEvent<
  [string, string],
  OwnershipTransferedEventObject
>;

export type OwnershipTransferedEventFilter =
  TypedEventFilter<OwnershipTransferedEvent>;

export interface RecoveryCanceledEventObject {
  wallet: string;
  _recovery: string;
}
export type RecoveryCanceledEvent = TypedEvent<
  [string, string],
  RecoveryCanceledEventObject
>;

export type RecoveryCanceledEventFilter =
  TypedEventFilter<RecoveryCanceledEvent>;

export interface RecoveryExecutedEventObject {
  wallet: string;
  _recovery: string;
  executeAfter: BigNumber;
}
export type RecoveryExecutedEvent = TypedEvent<
  [string, string, BigNumber],
  RecoveryExecutedEventObject
>;

export type RecoveryExecutedEventFilter =
  TypedEventFilter<RecoveryExecutedEvent>;

export interface RecoveryFinalizedEventObject {
  wallet: string;
  _recovery: string;
}
export type RecoveryFinalizedEvent = TypedEvent<
  [string, string],
  RecoveryFinalizedEventObject
>;

export type RecoveryFinalizedEventFilter =
  TypedEventFilter<RecoveryFinalizedEvent>;

export interface RefundEventObject {
  wallet: string;
  refundAddress: string;
  refundToken: string;
  refundAmount: BigNumber;
}
export type RefundEvent = TypedEvent<
  [string, string, string, BigNumber],
  RefundEventObject
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export interface RemovedFromWhitelistEventObject {
  wallet: string;
  target: string;
}
export type RemovedFromWhitelistEvent = TypedEvent<
  [string, string],
  RemovedFromWhitelistEventObject
>;

export type RemovedFromWhitelistEventFilter =
  TypedEventFilter<RemovedFromWhitelistEvent>;

export interface SessionClearedEventObject {
  wallet: string;
  sessionKey: string;
}
export type SessionClearedEvent = TypedEvent<
  [string, string],
  SessionClearedEventObject
>;

export type SessionClearedEventFilter = TypedEventFilter<SessionClearedEvent>;

export interface SessionCreatedEventObject {
  wallet: string;
  sessionKey: string;
  expires: BigNumber;
}
export type SessionCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  SessionCreatedEventObject
>;

export type SessionCreatedEventFilter = TypedEventFilter<SessionCreatedEvent>;

export interface TransactionExecutedEventObject {
  wallet: string;
  success: boolean;
  returnData: string;
  signedHash: string;
}
export type TransactionExecutedEvent = TypedEvent<
  [string, boolean, string, string],
  TransactionExecutedEventObject
>;

export type TransactionExecutedEventFilter =
  TypedEventFilter<TransactionExecutedEvent>;

export interface UnlockedEventObject {
  wallet: string;
}
export type UnlockedEvent = TypedEvent<[string], UnlockedEventObject>;

export type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;

export interface WalletUpgradedEventObject {
  wallet: string;
  _newImplementation: string;
}
export type WalletUpgradedEvent = TypedEvent<
  [string, string],
  WalletUpgradedEventObject
>;

export type WalletUpgradedEventFilter = TypedEventFilter<WalletUpgradedEvent>;

export interface ArgentModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArgentModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    addGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addModule(
      _wallet: string,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addToWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clearSession(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    confirmGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    confirmGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    execute(
      _wallet: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeRecovery(
      _wallet: string,
      _recovery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getGuardians(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _guardians: string[] }>;

    getLock(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _releaseAfter: BigNumber }>;

    getRecovery(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        _address: string;
        _executeAfter: BigNumber;
        _guardianCount: number;
      }
    >;

    getRequiredSignatures(
      _wallet: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getSession(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { key: string; expires: BigNumber }>;

    guardianCount(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _count: BigNumber }>;

    init(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isExecutedTx(
      _wallet: string,
      _signHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { executed: boolean }>;

    isGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isGuardian: boolean }>;

    isLocked(_wallet: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSignatureModule(overrides?: CallOverrides): Promise<[boolean]>;

    "isValidSignature(bytes32,bytes)"(
      _msgHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"(
      _userOp: UserOperationStruct,
      _userOpHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { validationData: BigNumber }>;

    isWhitelisted(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isWhitelisted: boolean }>;

    lock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiCall(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiCallWithGuardians(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiCallWithGuardiansAndStartSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      _sessionUser: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    multiCallWithSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsStaticCall(
      _methodId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isSupported: boolean }>;

    transferOwnership(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unlock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeWallet(
      _wallet: string,
      _newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  addGuardian(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addModule(
    _wallet: string,
    _module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addToWhitelist(
    _wallet: string,
    _target: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelGuardianAddition(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelGuardianRevokation(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelRecovery(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clearSession(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  confirmGuardianAddition(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  confirmGuardianRevokation(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  execute(
    _wallet: string,
    _data: BytesLike,
    _nonce: BigNumberish,
    _deadline: BigNumberish,
    _signatures: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeRecovery(
    _wallet: string,
    _recovery: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeRecovery(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getGuardians(_wallet: string, overrides?: CallOverrides): Promise<string[]>;

  getLock(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRecovery(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number] & {
      _address: string;
      _executeAfter: BigNumber;
      _guardianCount: number;
    }
  >;

  getRequiredSignatures(
    _wallet: string,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  getSession(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { key: string; expires: BigNumber }>;

  guardianCount(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isExecutedTx(
    _wallet: string,
    _signHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGuardian(
    _wallet: string,
    _guardian: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

  isSignatureModule(overrides?: CallOverrides): Promise<boolean>;

  "isValidSignature(bytes32,bytes)"(
    _msgHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"(
    _userOp: UserOperationStruct,
    _userOpHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isWhitelisted(
    _wallet: string,
    _target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiCall(
    _wallet: string,
    _transactions: TransactionManager.CallStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiCallWithGuardians(
    _wallet: string,
    _transactions: TransactionManager.CallStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiCallWithGuardiansAndStartSession(
    _wallet: string,
    _transactions: TransactionManager.CallStruct[],
    _sessionUser: string,
    _duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  multiCallWithSession(
    _wallet: string,
    _transactions: TransactionManager.CallStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    _wallet: string,
    _target: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeGuardian(
    _wallet: string,
    _guardian: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsStaticCall(
    _methodId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    _wallet: string,
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unlock(
    _wallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeWallet(
    _wallet: string,
    _newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    addGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addModule(
      _wallet: string,
      _module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToWhitelist(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRecovery(_wallet: string, overrides?: CallOverrides): Promise<void>;

    clearSession(_wallet: string, overrides?: CallOverrides): Promise<void>;

    confirmGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    execute(
      _wallet: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeRecovery(
      _wallet: string,
      _recovery: string,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRecovery(_wallet: string, overrides?: CallOverrides): Promise<void>;

    getGuardians(_wallet: string, overrides?: CallOverrides): Promise<string[]>;

    getLock(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRecovery(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        _address: string;
        _executeAfter: BigNumber;
        _guardianCount: number;
      }
    >;

    getRequiredSignatures(
      _wallet: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getSession(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { key: string; expires: BigNumber }>;

    guardianCount(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_wallet: string, overrides?: CallOverrides): Promise<void>;

    isExecutedTx(
      _wallet: string,
      _signHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

    isSignatureModule(overrides?: CallOverrides): Promise<boolean>;

    "isValidSignature(bytes32,bytes)"(
      _msgHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"(
      _userOp: UserOperationStruct,
      _userOpHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(_wallet: string, overrides?: CallOverrides): Promise<void>;

    multiCall(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiCallWithGuardians(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiCallWithGuardiansAndStartSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      _sessionUser: string,
      _duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiCallWithSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    recoverToken(_token: string, overrides?: CallOverrides): Promise<void>;

    removeFromWhitelist(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsStaticCall(
      _methodId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      _wallet: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(_wallet: string, overrides?: CallOverrides): Promise<void>;

    upgradeWallet(
      _wallet: string,
      _newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedToWhitelist(address,address,uint64)"(
      wallet?: string | null,
      target?: string | null,
      whitelistAfter?: null
    ): AddedToWhitelistEventFilter;
    AddedToWhitelist(
      wallet?: string | null,
      target?: string | null,
      whitelistAfter?: null
    ): AddedToWhitelistEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "GuardianAdded(address,address)"(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianAddedEventFilter;
    GuardianAdded(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianAddedEventFilter;

    "GuardianAdditionCancelled(address,address)"(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianAdditionCancelledEventFilter;
    GuardianAdditionCancelled(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianAdditionCancelledEventFilter;

    "GuardianAdditionRequested(address,address,uint256)"(
      wallet?: string | null,
      guardian?: string | null,
      executeAfter?: null
    ): GuardianAdditionRequestedEventFilter;
    GuardianAdditionRequested(
      wallet?: string | null,
      guardian?: string | null,
      executeAfter?: null
    ): GuardianAdditionRequestedEventFilter;

    "GuardianRevokationCancelled(address,address)"(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianRevokationCancelledEventFilter;
    GuardianRevokationCancelled(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianRevokationCancelledEventFilter;

    "GuardianRevokationRequested(address,address,uint256)"(
      wallet?: string | null,
      guardian?: string | null,
      executeAfter?: null
    ): GuardianRevokationRequestedEventFilter;
    GuardianRevokationRequested(
      wallet?: string | null,
      guardian?: string | null,
      executeAfter?: null
    ): GuardianRevokationRequestedEventFilter;

    "GuardianRevoked(address,address)"(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianRevokedEventFilter;
    GuardianRevoked(
      wallet?: string | null,
      guardian?: string | null
    ): GuardianRevokedEventFilter;

    "Locked(address,uint64)"(
      wallet?: string | null,
      releaseAfter?: null
    ): LockedEventFilter;
    Locked(wallet?: string | null, releaseAfter?: null): LockedEventFilter;

    "ModuleCreated(bytes32)"(name?: null): ModuleCreatedEventFilter;
    ModuleCreated(name?: null): ModuleCreatedEventFilter;

    "OwnershipTransfered(address,address)"(
      wallet?: string | null,
      _newOwner?: string | null
    ): OwnershipTransferedEventFilter;
    OwnershipTransfered(
      wallet?: string | null,
      _newOwner?: string | null
    ): OwnershipTransferedEventFilter;

    "RecoveryCanceled(address,address)"(
      wallet?: string | null,
      _recovery?: string | null
    ): RecoveryCanceledEventFilter;
    RecoveryCanceled(
      wallet?: string | null,
      _recovery?: string | null
    ): RecoveryCanceledEventFilter;

    "RecoveryExecuted(address,address,uint64)"(
      wallet?: string | null,
      _recovery?: string | null,
      executeAfter?: null
    ): RecoveryExecutedEventFilter;
    RecoveryExecuted(
      wallet?: string | null,
      _recovery?: string | null,
      executeAfter?: null
    ): RecoveryExecutedEventFilter;

    "RecoveryFinalized(address,address)"(
      wallet?: string | null,
      _recovery?: string | null
    ): RecoveryFinalizedEventFilter;
    RecoveryFinalized(
      wallet?: string | null,
      _recovery?: string | null
    ): RecoveryFinalizedEventFilter;

    "Refund(address,address,address,uint256)"(
      wallet?: string | null,
      refundAddress?: string | null,
      refundToken?: null,
      refundAmount?: null
    ): RefundEventFilter;
    Refund(
      wallet?: string | null,
      refundAddress?: string | null,
      refundToken?: null,
      refundAmount?: null
    ): RefundEventFilter;

    "RemovedFromWhitelist(address,address)"(
      wallet?: string | null,
      target?: string | null
    ): RemovedFromWhitelistEventFilter;
    RemovedFromWhitelist(
      wallet?: string | null,
      target?: string | null
    ): RemovedFromWhitelistEventFilter;

    "SessionCleared(address,address)"(
      wallet?: string | null,
      sessionKey?: null
    ): SessionClearedEventFilter;
    SessionCleared(
      wallet?: string | null,
      sessionKey?: null
    ): SessionClearedEventFilter;

    "SessionCreated(address,address,uint64)"(
      wallet?: string | null,
      sessionKey?: null,
      expires?: null
    ): SessionCreatedEventFilter;
    SessionCreated(
      wallet?: string | null,
      sessionKey?: null,
      expires?: null
    ): SessionCreatedEventFilter;

    "TransactionExecuted(address,bool,bytes,bytes32)"(
      wallet?: string | null,
      success?: boolean | null,
      returnData?: null,
      signedHash?: null
    ): TransactionExecutedEventFilter;
    TransactionExecuted(
      wallet?: string | null,
      success?: boolean | null,
      returnData?: null,
      signedHash?: null
    ): TransactionExecutedEventFilter;

    "Unlocked(address)"(wallet?: string | null): UnlockedEventFilter;
    Unlocked(wallet?: string | null): UnlockedEventFilter;

    "WalletUpgraded(address,address)"(
      wallet?: string | null,
      _newImplementation?: string | null
    ): WalletUpgradedEventFilter;
    WalletUpgraded(
      wallet?: string | null,
      _newImplementation?: string | null
    ): WalletUpgradedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    addGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addModule(
      _wallet: string,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addToWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clearSession(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    confirmGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    confirmGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _wallet: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeRecovery(
      _wallet: string,
      _recovery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getGuardians(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLock(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRecovery(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredSignatures(
      _wallet: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSession(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    guardianCount(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isExecutedTx(
      _wallet: string,
      _signHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSignatureModule(overrides?: CallOverrides): Promise<BigNumber>;

    "isValidSignature(bytes32,bytes)"(
      _msgHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"(
      _userOp: UserOperationStruct,
      _userOpHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiCall(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiCallWithGuardians(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiCallWithGuardiansAndStartSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      _sessionUser: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    multiCallWithSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsStaticCall(
      _methodId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unlock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeWallet(
      _wallet: string,
      _newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addModule(
      _wallet: string,
      _module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clearSession(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    confirmGuardianAddition(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    confirmGuardianRevokation(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _wallet: string,
      _data: BytesLike,
      _nonce: BigNumberish,
      _deadline: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeRecovery(
      _wallet: string,
      _recovery: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeRecovery(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getGuardians(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLock(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecovery(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredSignatures(
      _wallet: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSession(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardianCount(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isExecutedTx(
      _wallet: string,
      _signHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSignatureModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isValidSignature(bytes32,bytes)"(
      _msgHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)"(
      _userOp: UserOperationStruct,
      _userOpHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _wallet: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiCall(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiCallWithGuardians(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiCallWithGuardiansAndStartSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      _sessionUser: string,
      _duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    multiCallWithSession(
      _wallet: string,
      _transactions: TransactionManager.CallStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _wallet: string,
      _target: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeGuardian(
      _wallet: string,
      _guardian: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsStaticCall(
      _methodId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unlock(
      _wallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeWallet(
      _wallet: string,
      _newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
